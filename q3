Script 3: Use the data in the case study to create the following output using SQL:
• user_id
• ride_id
• ride_start
• Time a car is not used between two rides
• Time between two rides by customers







select distinct ID_vehicle, avg(datediff(ride_end_datetime, ride_start_datetime)) as time from data_analyst_rides_2023 group by ID_vehicle

select distinct ID_USER, avg(datediff(ride_end_datetime, ride_start_datetime)) as time from data_analyst_rides_2023 group by ID_USER

#eliminates 1 time users
select ID_USER, count(ID_RIDE) as "cride" from data_analyst_rides_2023 group by ID_USER having count(*) > 1 order by cride asc
#make cride table
create table cride1 as select ID_USER, count(ID_RIDE) as "cride" from data_analyst_rides_2023 group by ID_USER having count(*) > 1 order by cride asc;
#adds cride to orginial and elimates the non-1 timers
select * from cride1  left join data_analyst_rides_2023 on cride1.ID_USER = data_analyst_rides_2023.ID_USER order by cride asc
#multi users only table
create table multi_user1 as select cride, ID_RIDE, data_analyst_rides_2023.ID_user, RIDE_END_DATETIME, RIDE_start_DATETIME  
from cride1  left join data_analyst_rides_2023 on cride1.ID_USER = data_analyst_rides_2023.ID_USER 

#all vehicle have over 1 use
select ID_Vehicle, count(ID_RIDE) as "CountVehicle" 
from data_analyst_rides_2023 group by ID_Vehicle order by CountVehicle asc

select ID_USER, min(RIDE_END_DATETIME), max(RIDE_START_DATETIME)
from multi_user1 group by ID_USER


create table min_and_max_by_user as select ID_USER, min(RIDE_END_DATETIME), max(RIDE_START_DATETIME)
from multi_user1 group by ID_USER


create table min_and_max_by_user2 as select ID_USER, min(RIDE_END_DATETIME)as "min_end", max(RIDE_START_DATETIME) as "max_start"
from multi_user1 group by ID_USER

select min_max.ID_USER, min_max.min_end, min_max.max_start, cride.cride
from min_and_max_by_user2 as min_max left join cride1 as cride on cride.ID_USER  = min_max.ID_USER 
